// REGLAS DE FIRESTORE PARA PRODUCCIÓN
// Sistema de chat infantil con control parental

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // ===== USUARIOS =====
    match /users/{userId} {
      allow read: if isAuthenticated() &&
                     (userId == request.auth.uid || isParentOf(userId));
      allow create: if isAuthenticated() && userId == request.auth.uid && isValidUserData();
      allow update: if isAuthenticated() &&
                       (userId == request.auth.uid || isParentOf(userId)) &&
                       isValidUserUpdate();
      allow delete: if false; // No permitir eliminar usuarios
    }

    // ===== HISTORIAS =====
    match /stories/{storyId} {
      allow read: if isAuthenticated() && canReadStory();
      allow create: if isAuthenticated() && isValidStoryCreate();
      allow update: if isAuthenticated() && canUpdateStory();
      allow delete: if isAuthenticated() &&
                       (resource.data.userId == request.auth.uid ||
                        isParentOf(resource.data.userId));
    }

    // ===== SOLICITUDES DE APROBACIÓN DE HISTORIAS =====
    match /story_approval_requests/{requestId} {
      allow read: if isAuthenticated() &&
                     (resource.data.parentId == request.auth.uid ||
                      resource.data.childId == request.auth.uid);
      allow create: if isAuthenticated() && isValidApprovalRequest();
      allow update: if isAuthenticated() &&
                       resource.data.parentId == request.auth.uid &&
                       isValidApprovalUpdate();
      allow delete: if isAuthenticated() && resource.data.parentId == request.auth.uid;
    }

    // ===== CHATS =====
    match /chats/{chatId} {
      allow read: if isAuthenticated() && isParticipantInChat(chatId);
      allow create: if isAuthenticated() && isValidChatCreate();
      allow update: if isAuthenticated() && isParticipantInChat(chatId);
      allow delete: if false; // No permitir eliminar chats
    }

    // ===== MENSAJES =====
    match /chats/{chatId}/messages/{messageId} {
      allow read: if isAuthenticated() && isParticipantInChat(chatId);
      allow create: if isAuthenticated() &&
                       isParticipantInChat(chatId) &&
                       isValidMessageCreate();
      allow update: if isAuthenticated() &&
                       (resource.data.senderId == request.auth.uid ||
                        isParentOfSender());
      allow delete: if isAuthenticated() &&
                       (resource.data.senderId == request.auth.uid ||
                        isParentOfSender());
    }

    // ===== WHITELIST (CONTACTOS APROBADOS) =====
    match /whitelist/{whitelistId} {
      allow read: if isAuthenticated() &&
                     (resource.data.childId == request.auth.uid ||
                      isParentOf(resource.data.childId));
      allow create: if isAuthenticated() && isValidWhitelistCreate();
      allow update: if isAuthenticated() && isParentOf(resource.data.childId);
      allow delete: if isAuthenticated() &&
                       (isParentOf(resource.data.childId) ||
                        resource.data.childId == request.auth.uid);
    }

    // ===== SOLICITUDES DE CONTACTO =====
    match /contact_requests/{requestId} {
      allow read: if isAuthenticated() &&
                     (resource.data.fromUserId == request.auth.uid ||
                      resource.data.toUserId == request.auth.uid ||
                      isParentOf(resource.data.toUserId));
      allow create: if isAuthenticated() && isValidContactRequest();
      allow update: if isAuthenticated() &&
                       (resource.data.toUserId == request.auth.uid ||
                        isParentOf(resource.data.toUserId));
      allow delete: if isAuthenticated() &&
                       (resource.data.fromUserId == request.auth.uid ||
                        isParentOf(resource.data.toUserId));
    }

    // ===== NOTIFICACIONES =====
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() &&
                     resource.data.recipientId == request.auth.uid;
      allow create: if isAuthenticated() && isValidNotificationCreate();
      allow update: if isAuthenticated() &&
                       resource.data.recipientId == request.auth.uid;
      allow delete: if isAuthenticated() &&
                       resource.data.recipientId == request.auth.uid;
    }

    // ===== REPORTES =====
    match /reports/{reportId} {
      allow read: if isAuthenticated() &&
                     (resource.data.parentId == request.auth.uid ||
                      resource.data.childId == request.auth.uid);
      allow create: if isAuthenticated() && isValidReportCreate();
      allow update: if false; // Los reportes no se modifican
      allow delete: if isAuthenticated() && resource.data.parentId == request.auth.uid;
    }

    // ===== FUNCIONES DE SEGURIDAD =====

    // Verificar autenticación básica
    function isAuthenticated() {
      return request.auth != null && request.auth.uid != null;
    }

    // Verificar si es padre de un usuario
    function isParentOf(userId) {
      return exists(/databases/$(database)/documents/users/$(userId)) &&
             get(/databases/$(database)/documents/users/$(userId)).data.parentId == request.auth.uid;
    }

    // Verificar si puede leer una historia
    function canReadStory() {
      return resource.data.userId == request.auth.uid ||
             (resource.data.status == 'approved' && isInWhitelist(resource.data.userId)) ||
             isParentOf(resource.data.userId);
    }

    // Verificar si puede actualizar una historia (solo padres para aprobar/rechazar)
    function canUpdateStory() {
      return resource.data.userId == request.auth.uid ||
             (isParentOf(resource.data.userId) &&
              request.resource.data.keys().hasAny(['status', 'approvedBy', 'approvedAt', 'rejectionReason']));
    }

    // Verificar si está en la whitelist del usuario
    function isInWhitelist(userId) {
      return exists(/databases/$(database)/documents/whitelist/$(request.auth.uid + '_' + userId)) ||
             exists(/databases/$(database)/documents/whitelist/$(userId + '_' + request.auth.uid));
    }

    // Verificar participación en chat
    function isParticipantInChat(chatId) {
      return exists(/databases/$(database)/documents/chats/$(chatId)) &&
             request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
    }

    // Verificar si es padre del remitente del mensaje
    function isParentOfSender() {
      return exists(/databases/$(database)/documents/users/$(resource.data.senderId)) &&
             get(/databases/$(database)/documents/users/$(resource.data.senderId)).data.parentId == request.auth.uid;
    }

    // Validaciones de datos

    function isValidUserData() {
      return request.resource.data.keys().hasAll(['name', 'email']) &&
             request.resource.data.name is string &&
             request.resource.data.name.size() > 0 &&
             request.resource.data.email == request.auth.token.email;
    }

    function isValidUserUpdate() {
      return !request.resource.data.keys().hasAny(['parentId']) || // No permitir cambiar parentId
             isParentOf(request.auth.uid); // A menos que sea el padre
    }

    function isValidStoryCreate() {
      return request.resource.data.userId == request.auth.uid &&
             request.resource.data.keys().hasAll(['userId', 'mediaUrl', 'mediaType', 'createdAt']) &&
             request.resource.data.mediaType in ['image', 'video'] &&
             request.resource.data.status == 'pending';
    }

    function isValidApprovalRequest() {
      return request.resource.data.keys().hasAll(['parentId', 'childId', 'storyId']) &&
             request.resource.data.status == 'pending';
    }

    function isValidApprovalUpdate() {
      return request.resource.data.status in ['approved', 'rejected'] &&
             request.resource.data.keys().hasAny(['approvedAt', 'rejectedAt']);
    }

    function isValidChatCreate() {
      return request.auth.uid in request.resource.data.participants &&
             request.resource.data.participants.size() == 2; // Solo chats 1:1
    }

    function isValidMessageCreate() {
      return request.resource.data.senderId == request.auth.uid &&
             request.resource.data.keys().hasAll(['senderId', 'content', 'timestamp']) &&
             request.resource.data.content.size() <= 1000; // Límite de caracteres
    }

    function isValidWhitelistCreate() {
      return (request.resource.data.childId == request.auth.uid ||
              isParentOf(request.resource.data.childId)) &&
             request.resource.data.status == 'approved';
    }

    function isValidContactRequest() {
      return request.resource.data.fromUserId == request.auth.uid &&
             request.resource.data.status == 'pending';
    }

    function isValidNotificationCreate() {
      return request.resource.data.keys().hasAll(['recipientId', 'title', 'body', 'type']) &&
             request.resource.data.isRead == false;
    }

    function isValidReportCreate() {
      return request.resource.data.keys().hasAll(['parentId', 'childId', 'period']) &&
             (request.resource.data.parentId == request.auth.uid ||
              request.resource.data.childId == request.auth.uid);
    }

    // ===== RECHAZAR TODO LO DEMÁS =====
    match /{document=**} {
      allow read, write: if false;
    }
  }
}