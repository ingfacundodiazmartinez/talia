import 'package:agora_rtc_engine/agora_rtc_engine.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:permission_handler/permission_handler.dart';

class VideoCallService {
  static final VideoCallService _instance = VideoCallService._internal();
  factory VideoCallService() => _instance;
  VideoCallService._internal();

  // TODO: Reemplazar con tu APP_ID de Agora Console (https://console.agora.io/)
  static const String APP_ID = 'f4537746b6fc4e65aca1bd969c42c988';

  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  final FirebaseAuth _auth = FirebaseAuth.instance;

  RtcEngine? _engine;
  bool _isInitialized = false;
  bool _isMuted = false;
  bool _isCameraOff = false;

  /// Inicializar el engine de Agora para videollamadas
  Future<void> initializeAgora() async {
    // Si ya est√° inicializado, liberar primero para reiniciar en modo video
    if (_isInitialized && _engine != null) {
      print('‚ö†Ô∏è Agora ya est√° inicializado, liberando para reiniciar en modo video...');
      await _engine!.leaveChannel();
      await _engine!.release();
      _isInitialized = false;
      _engine = null;
    }

    try {
      print('üé• Inicializando Agora...');

      // Crear engine
      _engine = createAgoraRtcEngine();

      // Inicializar engine
      await _engine!.initialize(
        RtcEngineContext(
          appId: APP_ID,
          channelProfile: ChannelProfileType.channelProfileCommunication,
        ),
      );

      // Configurar event handlers
      _engine!.registerEventHandler(
        RtcEngineEventHandler(
          onJoinChannelSuccess: (RtcConnection connection, int elapsed) {
            print('‚úÖ Unido al canal: ${connection.channelId}');
          },
          onUserJoined: (RtcConnection connection, int remoteUid, int elapsed) {
            print('üë§ Usuario remoto unido: $remoteUid');
          },
          onUserOffline:
              (
                RtcConnection connection,
                int remoteUid,
                UserOfflineReasonType reason,
              ) {
                print('üëã Usuario remoto desconectado: $remoteUid');
              },
          onError: (ErrorCodeType err, String msg) {
            print('‚ùå Error de Agora: $err - $msg');
          },
        ),
      );

      // Habilitar video
      await _engine!.enableVideo();

      // Habilitar audio
      await _engine!.enableAudio();

      // Iniciar preview para solicitar permisos de iOS
      // Esto har√° que iOS muestre el di√°logo de permisos autom√°ticamente
      await _engine!.startPreview();

      _isInitialized = true;
      print('‚úÖ Agora inicializado correctamente');
    } catch (e) {
      print('‚ùå Error inicializando Agora: $e');
      rethrow;
    }
  }

  /// Inicializar el engine de Agora para llamadas de audio √∫nicamente
  Future<void> initializeAgoraAudio() async {
    // Si ya est√° inicializado, liberar primero para reiniciar en modo audio
    if (_isInitialized && _engine != null) {
      print('‚ö†Ô∏è Agora ya est√° inicializado, liberando para reiniciar en modo audio...');
      await _engine!.leaveChannel();
      await _engine!.release();
      _isInitialized = false;
      _engine = null;
    }

    try {
      print('üé§ Inicializando Agora para audio...');

      // Crear engine
      _engine = createAgoraRtcEngine();

      // Inicializar engine
      await _engine!.initialize(
        RtcEngineContext(
          appId: APP_ID,
          channelProfile: ChannelProfileType.channelProfileCommunication,
        ),
      );

      // Configurar event handlers
      _engine!.registerEventHandler(
        RtcEngineEventHandler(
          onJoinChannelSuccess: (RtcConnection connection, int elapsed) {
            print('‚úÖ Unido al canal de audio: ${connection.channelId}');
          },
          onUserJoined: (RtcConnection connection, int remoteUid, int elapsed) {
            print('üë§ Usuario remoto unido: $remoteUid');
          },
          onUserOffline:
              (
                RtcConnection connection,
                int remoteUid,
                UserOfflineReasonType reason,
              ) {
                print('üëã Usuario remoto desconectado: $remoteUid');
              },
          onError: (ErrorCodeType err, String msg) {
            print('‚ùå Error de Agora: $err - $msg');
          },
        ),
      );

      // Habilitar SOLO audio (sin video)
      await _engine!.enableAudio();

      _isInitialized = true;
      print('‚úÖ Agora audio inicializado correctamente');
    } catch (e) {
      print('‚ùå Error inicializando Agora audio: $e');
      rethrow;
    }
  }

  /// Solicitar permisos de c√°mara y micr√≥fono
  Future<Map<String, dynamic>> requestPermissions() async {
    try {
      print('üîí Solicitando permisos de c√°mara y micr√≥fono...');

      // Solicitar permisos directamente - esto mostrar√° el di√°logo del sistema
      final cameraStatus = await Permission.camera.request();
      final microphoneStatus = await Permission.microphone.request();

      print('üìπ Estado c√°mara despu√©s de request: $cameraStatus');
      print('üé§ Estado micr√≥fono despu√©s de request: $microphoneStatus');

      // Verificar si fueron concedidos
      bool allGranted = cameraStatus.isGranted && microphoneStatus.isGranted;

      if (allGranted) {
        print('‚úÖ Permisos concedidos');
        return {
          'granted': true,
          'permanentlyDenied': false,
        };
      }

      // Verificar si fueron permanentemente denegados
      bool isPermanentlyDenied = cameraStatus.isPermanentlyDenied || microphoneStatus.isPermanentlyDenied;

      if (isPermanentlyDenied) {
        print('‚ö†Ô∏è Permisos permanentemente denegados');
        return {
          'granted': false,
          'permanentlyDenied': true,
        };
      }

      print('‚ùå Permisos denegados');
      return {
        'granted': false,
        'permanentlyDenied': false,
      };
    } catch (e) {
      print('‚ùå Error solicitando permisos: $e');
      return {
        'granted': false,
        'permanentlyDenied': false,
      };
    }
  }

  /// Unirse a un canal de video
  Future<void> joinChannel({
    required String channelName,
    required String token,
    required int uid,
  }) async {
    if (!_isInitialized) {
      await initializeAgora();
    }

    try {
      print('üöÄ Uni√©ndose al canal: $channelName con UID: $uid');

      // Configurar opciones del canal
      ChannelMediaOptions options = const ChannelMediaOptions(
        clientRoleType: ClientRoleType.clientRoleBroadcaster,
        channelProfile: ChannelProfileType.channelProfileCommunication,
      );

      // Unirse al canal
      await _engine!.joinChannel(
        token: token,
        channelId: channelName,
        uid: uid,
        options: options,
      );

      print('‚úÖ Unido al canal exitosamente');
    } catch (e) {
      print('‚ùå Error uni√©ndose al canal: $e');
      rethrow;
    }
  }

  /// Salir del canal
  Future<void> leaveChannel() async {
    try {
      print('üëã Saliendo del canal...');

      await _engine?.leaveChannel();
      await _engine?.stopPreview();

      print('‚úÖ Canal abandonado');
    } catch (e) {
      print('‚ùå Error saliendo del canal: $e');
    }
  }

  /// Toggle micr√≥fono (mute/unmute)
  Future<void> toggleMute() async {
    try {
      _isMuted = !_isMuted;
      await _engine?.muteLocalAudioStream(_isMuted);
      print(_isMuted ? 'üîá Micr√≥fono silenciado' : 'üé§ Micr√≥fono activado');
    } catch (e) {
      print('‚ùå Error toggle mute: $e');
    }
  }

  /// Toggle c√°mara (on/off)
  Future<void> toggleCamera() async {
    try {
      _isCameraOff = !_isCameraOff;
      await _engine?.muteLocalVideoStream(_isCameraOff);
      print(_isCameraOff ? 'üì∑ C√°mara apagada' : 'üìπ C√°mara encendida');
    } catch (e) {
      print('‚ùå Error toggle camera: $e');
    }
  }

  /// Cambiar entre c√°mara frontal y trasera
  Future<void> switchCamera() async {
    try {
      await _engine?.switchCamera();
      print('üîÑ C√°mara cambiada');
    } catch (e) {
      print('‚ùå Error cambiando c√°mara: $e');
    }
  }

  /// Obtener el engine de Agora (para usar en la UI)
  RtcEngine? get engine => _engine;

  /// Estado del micr√≥fono
  bool get isMuted => _isMuted;

  /// Estado de la c√°mara
  bool get isCameraOff => _isCameraOff;

  /// Resetear estado de inicializaci√≥n (para reintentos despu√©s de error de permisos)
  void resetInitialization() {
    _isInitialized = false;
  }

  /// Liberar recursos
  Future<void> dispose() async {
    try {
      print('üßπ Limpiando recursos de Agora...');
      await _engine?.leaveChannel();
      await _engine?.release();
      _isInitialized = false;
      print('‚úÖ Recursos liberados');
    } catch (e) {
      print('‚ùå Error liberando recursos: $e');
    }
  }

  // ============================================
  // Se√±alizaci√≥n de llamadas con Firestore
  // ============================================

  /// Iniciar una videollamada (enviar invitaci√≥n)
  Future<String> startCall({
    required String callerId,
    required String callerName,
    required String receiverId,
    required String receiverName,
  }) async {
    try {
      print('üìû Iniciando videollamada de $callerName a $receiverName');

      // Crear documento de llamada en Firestore primero para obtener el ID
      final callDoc = await _firestore.collection('video_calls').add({
        'callerId': callerId,
        'callerName': callerName,
        'receiverId': receiverId,
        'receiverName': receiverName,
        'status': 'ringing', // ringing, accepted, rejected, ended
        'createdAt': FieldValue.serverTimestamp(),
        'token': '', // En producci√≥n, generar token desde servidor
        'callType': 'video', // Tipo de llamada
      });

      // Usar el ID del documento como nombre del canal (corto y √∫nico, ~20 caracteres)
      String channelName = callDoc.id;

      // Actualizar el documento con el nombre del canal
      await callDoc.update({
        'channelName': channelName,
      });

      // Crear notificaci√≥n para disparar push notification al receptor
      await _firestore.collection('notifications').add({
        'userId': receiverId,
        'type': 'video_call',
        'title': 'Videollamada entrante',
        'body': '$callerName te est√° llamando',
        'priority': 'high',
        'data': {
          'callId': callDoc.id,
          'callerId': callerId,
          'callerName': callerName,
          'channelName': channelName,
        },
        'createdAt': FieldValue.serverTimestamp(),
        'read': false,
      });

      print('‚úÖ Videollamada creada: ${callDoc.id}, Canal: $channelName');
      print('‚úÖ Notificaci√≥n de videollamada enviada a $receiverName');
      return callDoc.id;
    } catch (e) {
      print('‚ùå Error iniciando videollamada: $e');
      rethrow;
    }
  }

  /// Iniciar una llamada de audio (enviar invitaci√≥n)
  Future<String> startAudioCall({
    required String callerId,
    required String callerName,
    required String receiverId,
    required String receiverName,
  }) async {
    try {
      print('üìû Iniciando llamada de audio de $callerName a $receiverName');

      // Crear documento de llamada en Firestore
      final callDoc = await _firestore.collection('video_calls').add({
        'callerId': callerId,
        'callerName': callerName,
        'receiverId': receiverId,
        'receiverName': receiverName,
        'status': 'ringing',
        'createdAt': FieldValue.serverTimestamp(),
        'token': '',
        'callType': 'audio', // Tipo de llamada: audio
      });

      // Usar el ID del documento como nombre del canal
      String channelName = callDoc.id;

      // Actualizar el documento con el nombre del canal
      await callDoc.update({
        'channelName': channelName,
      });

      // Crear notificaci√≥n para disparar push notification al receptor
      await _firestore.collection('notifications').add({
        'userId': receiverId,
        'type': 'audio_call',
        'title': 'Llamada entrante',
        'body': '$callerName te est√° llamando',
        'priority': 'high',
        'data': {
          'callId': callDoc.id,
          'callerId': callerId,
          'callerName': callerName,
          'channelName': channelName,
        },
        'createdAt': FieldValue.serverTimestamp(),
        'read': false,
      });

      print('‚úÖ Llamada de audio creada: ${callDoc.id}, Canal: $channelName');
      print('‚úÖ Notificaci√≥n de llamada enviada a $receiverName');
      return callDoc.id;
    } catch (e) {
      print('‚ùå Error iniciando llamada de audio: $e');
      rethrow;
    }
  }

  /// Aceptar una llamada
  Future<void> acceptCall(String callId) async {
    try {
      print('‚úÖ Aceptando llamada: $callId');

      await _firestore.collection('video_calls').doc(callId).update({
        'status': 'accepted',
        'acceptedAt': FieldValue.serverTimestamp(),
      });
    } catch (e) {
      print('‚ùå Error aceptando llamada: $e');
      rethrow;
    }
  }

  /// Rechazar una llamada
  Future<void> rejectCall(String callId) async {
    try {
      print('‚ùå Rechazando llamada: $callId');

      await _firestore.collection('video_calls').doc(callId).update({
        'status': 'rejected',
        'rejectedAt': FieldValue.serverTimestamp(),
      });
    } catch (e) {
      print('‚ùå Error rechazando llamada: $e');
      rethrow;
    }
  }

  /// Terminar una llamada
  Future<void> endCall(String callId) async {
    try {
      print('üìµ Terminando llamada: $callId');

      await _firestore.collection('video_calls').doc(callId).update({
        'status': 'ended',
        'endedAt': FieldValue.serverTimestamp(),
      });

      await leaveChannel();
    } catch (e) {
      print('‚ùå Error terminando llamada: $e');
    }
  }

  /// Escuchar llamadas entrantes para un usuario
  Stream<QuerySnapshot> watchIncomingCalls(String userId) {
    return _firestore
        .collection('video_calls')
        .where('receiverId', isEqualTo: userId)
        .where('status', isEqualTo: 'ringing')
        .snapshots();
  }

  /// Escuchar el estado de una llamada espec√≠fica
  Stream<DocumentSnapshot> watchCallStatus(String callId) {
    return _firestore.collection('video_calls').doc(callId).snapshots();
  }
}
